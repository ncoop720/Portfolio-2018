var board;
var preset;
var speed = 300;
var myInterval;
var generation = 0;
var isRunning = false;
var height;
var width;

if ($(window).width() < 400) {
  height = 15;
  width = 20;
}
else if ($(window).width() < 576 && $(window).width()>= 400) {
  height = 20;
  width = 30;
}
else if ($(window).width() < 768 && $(window).width()>= 576) {
  height = 25;
  width = 35;
}
else if ($(window).width() < 992 && $(window).width()>= 768) {
  height = 30;
  width = 40;
}
else if ($(window).width() < 1200 && $(window).width()>= 992) {
  height = 35;
  width = 50;
}
else {
  height = 40;
  width = 60;
}

$(document).ready(function() {
  start();

  $(window).resize(function() {
    stopSimulation()
    if ($(this).width() < 400) {
      height = 15;
      width = 20;
    }
    else if ($(this).width() < 576 && $(this).width()>= 400) {
      height = 20;
      width = 30;
    }
    else if ($(this).width() < 768 && $(this).width()>= 576) {
      height = 25;
      width = 35;
    }
    else if ($(this).width() < 992 && $(this).width()>= 768) {
      height = 30;
      width = 40;
    }
    else if ($(this).width() < 1200 && $(this).width()>= 992) {
      height = 35;
      width = 50;
    }
    else {
      height = 40;
      width = 60;
    }
    selectPreset();
  });
  
  //add or remove cells on click
  $(document).on("click", ".cell", function() {
    var key = $(this).attr("id").split("-");
    //dead cells come to life
    if(board[key[0]][key[1]]=='dead') {
      board[key[0]][key[1]] = 'new';
    }
    //alive cells become dead
    else {
      board[key[0]][key[1]] = 'dead';
      $(this).removeClass("new");
    }
    generateBoard();
  });
  
  //change highlighted speed button
  $(".spdBtn").click(function() {
    $(".spdBtn").removeClass("active");
    $(this).toggleClass("active");
  });
  
  //change highlighted size button
  $(".szBtn").click(function() {
    $(".szBtn").removeClass("active");
    $(this).toggleClass("active");
  });
});

function start() {
  generateRandomCells();
  generateBoard();
}

function generateBoard() {
  //render the gameboard
  ReactDOM.render(
    <Board />,
    document.getElementById('gameBoard')
  );
  
}

//react component that renders the board display
class Board extends React.Component {
  render () {
    const style = {
      width: width * 10,
    };
    const style2 = {
      width: (width * 10) + 6,
      height: (height * 10) + 6
    };
    
    //nested mapping for multidimentional array
    var rows = board.map(function(cols, i) {
      var cells = cols.map(function(status, j) {
        //uses an id instead of a key for jQuerry use
        return <div id={i + "-" + j} className={"cell " + status}></div>;
      });
      
      return <div style={style} className="rows">{cells}</div>;
    });
    
    return <div style={style2} className="rowContainer">{rows}</div>;
  }
}

//change cells to next generation
function updateCells() {
  isRunning = true;
  generation++;
  //create a temporary board
  var tempBoard = [];
  for (var i=-1; i<=height; i++) {
    tempBoard[i] = [];
    tempBoard[i].length = board[0].length;
  }
  //set negative and extra indexes for copied board
  for (var i=-1; i<=height; i++) {
    for (var j=-1; j<=width; j++) {
      tempBoard[i][j] = 'dead';
    }
  }
  //update temporary board with the original board's data
  for (var i=0; i<height; i++) {
    for (var j=0; j<width; j++) {
      tempBoard[i][j] = board[i][j];
    }
  }
  //check for surrounding cells then go through the rules of the game
  for (var i=0; i<height; i++) {
    for (var j=0; j<width; j++) {
      var surroundingCells = 0;
      //check for number of living surrounding cells
      if (tempBoard[i-1][j-1]=='old' || tempBoard[i-1][j-1]=='new') {
        surroundingCells++;
      }
      if (tempBoard[i-1][j]=='old' || tempBoard[i-1][j]=='new') {
        surroundingCells++;
      }
      if (tempBoard[i-1][j+1]=='old' || tempBoard[i-1][j+1]=='new') {
        surroundingCells++;
      }
      if (tempBoard[i][j-1]=='old' || tempBoard[i][j-1]=='new') {
        surroundingCells++;
      }
      if (tempBoard[i][j+1]=='old' || tempBoard[i][j+1]=='new') {
        surroundingCells++;
      }
      if (tempBoard[i+1][j-1]=='old' || tempBoard[i+1][j-1]=='new') {
        surroundingCells++;
      }
      if (tempBoard[i+1][j]=='old' || tempBoard[i+1][j]=='new') {
        surroundingCells++;
      }
      if (tempBoard[i+1][j+1]=='old' || tempBoard[i+1][j+1]=='new') {
        surroundingCells++;
      }
      //change status of cell based on number of surrounding alive cells
      //rules for game of life
      if (tempBoard[i][j]=='old' || tempBoard[i][j]=='new') {
        if (surroundingCells<2) {
          board[i][j] = 'dead';
        }
        else if (surroundingCells==2 || surroundingCells==3) {
          board[i][j] = 'old';
        }
        else if (surroundingCells>3) {
          board[i][j] = 'dead';
        }
      }
      else if (tempBoard[i][j]=='dead') {
        if (surroundingCells==3) {
          board[i][j] = 'new';
        }
      }
    }
  }
  generateBoard();
}

//for the run button
function runSimulation() {
  if (!isRunning) {
    myInterval = setInterval("updateCells()", speed);
  }
}

//for the stop button
function stopSimulation() {
  clearTimeout(myInterval);
  isRunning = false;
}

//for the clear button
function clearSimulation() {
  clearTimeout(myInterval);
  isRunning = false;
  generation = 0;

  for (var i=0; i<height; i++) {
    for (var j=0; j<width; j++) {
      board[i][j] = 'dead';
    }
  }
  generateBoard();
}

//for the speed buttons
function rate(x) {
  if (isRunning) {
    stopSimulation();
    speed = x;
    runSimulation();
  }
  else {
    speed = x;
  }
}

//for the size buttons
function size(h, w) {
  stopSimulation();
  generation = 0;
  height = h;
  width = w;
  selectPreset();
}

//for the dropdown menu of presets
function selectPreset() {
  clearTimeout(myInterval);
  generation = 0;
  isRunning = false;
  var selectBox = document.getElementById("selectPreset");
  preset = selectBox.options[selectBox.selectedIndex].value;
  
  if (preset=='None') {
    generateDeadCells();
    generateBoard();
  }
  else if (preset=="Random") {
    generateRandomCells();
  }
  else if (preset=="10 Cell Row") {
    generateTenCellRow();
  }
  else if (preset=="Exploder") {
    generateExploder();
  }
  else if (preset=="Glider") {
    generateGlider();
  }
  else if (preset=="Lightweight Spaceship") {
    generateSpaceship();
  } 
  else if (preset=="Tumbler") {
    generateTumbler();
  }
  generateBoard();
}

//for the dropdown menu of speeds
function selectSpeed() {
  var selectBox = document.getElementById("selectSpeed");
  preset = selectBox.options[selectBox.selectedIndex].value;
  
  if (preset=='Slowest') {
    rate(1000);
  }
  else if (preset=="Slow") {
    rate(650);
  }
  else if (preset=="Normal") {
    rate(300);
  }
  else if (preset=="Fast") {
    rate(150);
  } 
  else if (preset=="Fastest") {
    rate(50);
  }
}

//set all cells to dead
function generateDeadCells() {
  board = [];
  for (var i=-1; i<height; i++) {
    board[i] = [];
  }
  
  for (var i=0; i<height; i++) {
    for (var j=0; j<width; j++) {
      board[i][j] = 'dead';
    }
  }
}

//creates a random set of cells
function generateRandomCells() {
  board = [];
  for (var i=-1; i<height; i++) {
    board[i] = [];
  }
  
  for (var i=0; i<height; i++) {
    for (var j=0; j<width; j++) {
      if (Math.random()<0.5) {
        board [i][j] = 'old';
      }
      else {
        board [i][j] = 'dead';
      }
    }
  }
}

//creates a lone 10 cell row
function generateTenCellRow() {
  generateDeadCells();
  let x = Math.floor(width/2);
  let y = Math.floor(height/2);
  board[y][x-5] = 'new';
  board[y][x-4] = 'new';
  board[y][x-3] = 'new';
  board[y][x-2] = 'new';
  board[y][x-1] = 'new';
  board[y][x] = 'new';
  board[y][x+1] = 'new';
  board[y][x+2] = 'new';
  board[y][x+3] = 'new';
  board[y][x+4] = 'new';
}

//creates a lone exploder
function generateExploder() {
  generateDeadCells();
  let x = Math.floor(width/2);
  let y = Math.floor(height/2);
  board[y-3][x] = 'new';
  board[y-3][x-2] = 'new';
  board[y-2][x-2] = 'new';
  board[y-1][x-2] = 'new';
  board[y][x-2] = 'new';
  board[y+1][x-2] = 'new';
  board[y-3][x+2] = 'new';
  board[y-2][x+2] = 'new';
  board[y-1][x+2] = 'new';
  board[y][x+2] = 'new';
  board[y+1][x+2] = 'new';
  board[y+1][x] = 'new';
}

//creates a lone glider
function generateGlider() {
  generateDeadCells();
  board[1][2] = 'new';
  board[2][3] = 'new';
  board[3][1] = 'new';
  board[3][2] = 'new';
  board[3][3] = 'new';
}

//creates a lightweight spaceship
function generateSpaceship() {
  generateDeadCells();
  let y = Math.floor(height/2);
  board[y-2][2] = 'new';
  board[y-2][3] = 'new';
  board[y-2][4] = 'new';
  board[y-2][5] = 'new';
  board[y-1][5] = 'new';
  board[y][5] = 'new';
  board[y+1][4] = 'new';
  board[y-1][1] = 'new';
  board[y+1][1] = 'new';
}

//creates a tumbler
function generateTumbler() {
  generateDeadCells();
  let x = Math.floor(width/2);
  let y = Math.floor(height/2);
  board[y-3][x-2] = 'new';
  board[y-2][x-2] = 'new';
  board[y-3][x-1] = 'new';
  board[y-2][x-1] = 'new';
  board[y-1][x-1] = 'new';
  board[y][x-1] = 'new';
  board[y+1][x-1] = 'new';
  board[y-3][x+2] = 'new';
  board[y-2][x+2] = 'new';
  board[y-3][x+1] = 'new';
  board[y-2][x+1] = 'new';
  board[y-1][x+1] = 'new';
  board[y][x+1] = 'new';
  board[y+1][x+1] = 'new';
  board[y][x-3] = 'new';
  board[y+1][x-3] = 'new';
  board[y+2][x-3] = 'new';
  board[y+2][x-2] = 'new';
  board[y][x+3] = 'new';
  board[y+1][x+3] = 'new';
  board[y+2][x+3] = 'new';
  board[y+2][x+2] = 'new';
}